// Mocks generated by Mockito 5.4.4 from annotations
// in time_sheet/test/dynamic_multiplatform_notification_service_reminder_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i18;
import 'dart:typed_data' as _i27;

import 'package:bloc/bloc.dart' as _i25;
import 'package:flutter_local_notifications/src/flutter_local_notifications_plugin.dart'
    as _i17;
import 'package:flutter_local_notifications/src/initialization_settings.dart'
    as _i19;
import 'package:flutter_local_notifications/src/notification_details.dart'
    as _i21;
import 'package:flutter_local_notifications/src/platform_flutter_local_notifications.dart'
    as _i29;
import 'package:flutter_local_notifications/src/platform_specifics/android/enums.dart'
    as _i32;
import 'package:flutter_local_notifications/src/platform_specifics/android/initialization_settings.dart'
    as _i30;
import 'package:flutter_local_notifications/src/platform_specifics/android/notification_channel.dart'
    as _i34;
import 'package:flutter_local_notifications/src/platform_specifics/android/notification_channel_group.dart'
    as _i33;
import 'package:flutter_local_notifications/src/platform_specifics/android/notification_details.dart'
    as _i31;
import 'package:flutter_local_notifications/src/platform_specifics/android/schedule_mode.dart'
    as _i23;
import 'package:flutter_local_notifications/src/platform_specifics/android/styles/messaging_style_information.dart'
    as _i35;
import 'package:flutter_local_notifications/src/platform_specifics/darwin/initialization_settings.dart'
    as _i36;
import 'package:flutter_local_notifications/src/platform_specifics/darwin/notification_details.dart'
    as _i38;
import 'package:flutter_local_notifications/src/platform_specifics/darwin/notification_enabled_options.dart'
    as _i37;
import 'package:flutter_local_notifications/src/types.dart' as _i24;
import 'package:flutter_local_notifications_platform_interface/flutter_local_notifications_platform_interface.dart'
    as _i20;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i26;
import 'package:time_sheet/features/pointage/domain/use_cases/delete_timesheet_entry_usecase.dart'
    as _i3;
import 'package:time_sheet/features/pointage/domain/use_cases/generate_monthly_timesheet_usease.dart'
    as _i5;
import 'package:time_sheet/features/pointage/domain/use_cases/get_monthly_timesheet_entries_usecase.dart'
    as _i11;
import 'package:time_sheet/features/pointage/domain/use_cases/get_overtime_hours_usecase.dart'
    as _i9;
import 'package:time_sheet/features/pointage/domain/use_cases/get_remaining_vacation_days_usecase.dart'
    as _i8;
import 'package:time_sheet/features/pointage/domain/use_cases/get_today_timesheet_entry_use_case.dart'
    as _i4;
import 'package:time_sheet/features/pointage/domain/use_cases/get_weekly_work_time_usecase.dart'
    as _i7;
import 'package:time_sheet/features/pointage/domain/use_cases/save_timesheet_entry_usecase.dart'
    as _i2;
import 'package:time_sheet/features/pointage/domain/use_cases/signaler_absence_periode_usecase.dart'
    as _i10;
import 'package:time_sheet/features/pointage/presentation/pages/time-sheet/bloc/time_sheet/time_sheet_bloc.dart'
    as _i12;
import 'package:time_sheet/features/preference/domain/use_cases/get_user_preference_use_case.dart'
    as _i13;
import 'package:time_sheet/features/preference/domain/use_cases/register_manager_use_case.dart'
    as _i15;
import 'package:time_sheet/features/preference/domain/use_cases/set_user_preference_use_case.dart'
    as _i14;
import 'package:time_sheet/features/preference/domain/use_cases/unregister_manager_use_case.dart'
    as _i16;
import 'package:time_sheet/features/preference/presentation/manager/preferences_bloc.dart'
    as _i6;
import 'package:time_sheet/services/timer_service.dart' as _i28;
import 'package:timezone/timezone.dart' as _i22;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSaveTimesheetEntryUseCase_0 extends _i1.SmartFake
    implements _i2.SaveTimesheetEntryUseCase {
  _FakeSaveTimesheetEntryUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteTimesheetEntryUsecase_1 extends _i1.SmartFake
    implements _i3.DeleteTimesheetEntryUsecase {
  _FakeDeleteTimesheetEntryUsecase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTodayTimesheetEntryUseCase_2 extends _i1.SmartFake
    implements _i4.GetTodayTimesheetEntryUseCase {
  _FakeGetTodayTimesheetEntryUseCase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGenerateMonthlyTimesheetUseCase_3 extends _i1.SmartFake
    implements _i5.GenerateMonthlyTimesheetUseCase {
  _FakeGenerateMonthlyTimesheetUseCase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePreferencesBloc_4 extends _i1.SmartFake
    implements _i6.PreferencesBloc {
  _FakePreferencesBloc_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWeeklyWorkTimeUseCase_5 extends _i1.SmartFake
    implements _i7.GetWeeklyWorkTimeUseCase {
  _FakeGetWeeklyWorkTimeUseCase_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetRemainingVacationDaysUseCase_6 extends _i1.SmartFake
    implements _i8.GetRemainingVacationDaysUseCase {
  _FakeGetRemainingVacationDaysUseCase_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetOvertimeHoursUseCase_7 extends _i1.SmartFake
    implements _i9.GetOvertimeHoursUseCase {
  _FakeGetOvertimeHoursUseCase_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSignalerAbsencePeriodeUsecase_8 extends _i1.SmartFake
    implements _i10.SignalerAbsencePeriodeUsecase {
  _FakeSignalerAbsencePeriodeUsecase_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetMonthlyTimesheetEntriesUseCase_9 extends _i1.SmartFake
    implements _i11.GetMonthlyTimesheetEntriesUseCase {
  _FakeGetMonthlyTimesheetEntriesUseCase_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTimeSheetState_10 extends _i1.SmartFake
    implements _i12.TimeSheetState {
  _FakeTimeSheetState_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetUserPreferenceUseCase_11 extends _i1.SmartFake
    implements _i13.GetUserPreferenceUseCase {
  _FakeGetUserPreferenceUseCase_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSetUserPreferenceUseCase_12 extends _i1.SmartFake
    implements _i14.SetUserPreferenceUseCase {
  _FakeSetUserPreferenceUseCase_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRegisterManagerUseCase_13 extends _i1.SmartFake
    implements _i15.RegisterManagerUseCase {
  _FakeRegisterManagerUseCase_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUnregisterManagerUseCase_14 extends _i1.SmartFake
    implements _i16.UnregisterManagerUseCase {
  _FakeUnregisterManagerUseCase_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_15 extends _i1.SmartFake implements Duration {
  _FakeDuration_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterLocalNotificationsPlugin extends _i1.Mock
    implements _i17.FlutterLocalNotificationsPlugin {
  MockFlutterLocalNotificationsPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Future<bool?> initialize(
    _i19.InitializationSettings? initializationSettings, {
    _i20.DidReceiveNotificationResponseCallback?
        onDidReceiveNotificationResponse,
    _i20.DidReceiveBackgroundNotificationResponseCallback?
        onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [initializationSettings],
          {
            #onDidReceiveNotificationResponse: onDidReceiveNotificationResponse,
            #onDidReceiveBackgroundNotificationResponse:
                onDidReceiveBackgroundNotificationResponse,
          },
        ),
        returnValue: _i18.Future<bool?>.value(),
      ) as _i18.Future<bool?>);

  @override
  _i18.Future<_i20.NotificationAppLaunchDetails?>
      getNotificationAppLaunchDetails() => (super.noSuchMethod(
            Invocation.method(
              #getNotificationAppLaunchDetails,
              [],
            ),
            returnValue:
                _i18.Future<_i20.NotificationAppLaunchDetails?>.value(),
          ) as _i18.Future<_i20.NotificationAppLaunchDetails?>);

  @override
  _i18.Future<void> show(
    int? id,
    String? title,
    String? body,
    _i21.NotificationDetails? notificationDetails, {
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #show,
          [
            id,
            title,
            body,
            notificationDetails,
          ],
          {#payload: payload},
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> cancel(
    int? id, {
    String? tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [id],
          {#tag: tag},
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> cancelAll() => (super.noSuchMethod(
        Invocation.method(
          #cancelAll,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> cancelAllPendingNotifications() => (super.noSuchMethod(
        Invocation.method(
          #cancelAllPendingNotifications,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i22.TZDateTime? scheduledDate,
    _i21.NotificationDetails? notificationDetails, {
    required _i23.AndroidScheduleMode? androidScheduleMode,
    String? payload,
    _i24.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #zonedSchedule,
          [
            id,
            title,
            body,
            scheduledDate,
            notificationDetails,
          ],
          {
            #androidScheduleMode: androidScheduleMode,
            #payload: payload,
            #matchDateTimeComponents: matchDateTimeComponents,
          },
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i20.RepeatInterval? repeatInterval,
    _i21.NotificationDetails? notificationDetails, {
    required _i23.AndroidScheduleMode? androidScheduleMode,
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #periodicallyShow,
          [
            id,
            title,
            body,
            repeatInterval,
            notificationDetails,
          ],
          {
            #androidScheduleMode: androidScheduleMode,
            #payload: payload,
          },
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> periodicallyShowWithDuration(
    int? id,
    String? title,
    String? body,
    Duration? repeatDurationInterval,
    _i21.NotificationDetails? notificationDetails, {
    _i23.AndroidScheduleMode? androidScheduleMode =
        _i23.AndroidScheduleMode.exact,
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #periodicallyShowWithDuration,
          [
            id,
            title,
            body,
            repeatDurationInterval,
            notificationDetails,
          ],
          {
            #androidScheduleMode: androidScheduleMode,
            #payload: payload,
          },
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<List<_i20.PendingNotificationRequest>>
      pendingNotificationRequests() => (super.noSuchMethod(
            Invocation.method(
              #pendingNotificationRequests,
              [],
            ),
            returnValue:
                _i18.Future<List<_i20.PendingNotificationRequest>>.value(
                    <_i20.PendingNotificationRequest>[]),
          ) as _i18.Future<List<_i20.PendingNotificationRequest>>);

  @override
  _i18.Future<List<_i20.ActiveNotification>> getActiveNotifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveNotifications,
          [],
        ),
        returnValue: _i18.Future<List<_i20.ActiveNotification>>.value(
            <_i20.ActiveNotification>[]),
      ) as _i18.Future<List<_i20.ActiveNotification>>);
}

/// A class which mocks [TimeSheetBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimeSheetBloc extends _i1.Mock implements _i12.TimeSheetBloc {
  MockTimeSheetBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SaveTimesheetEntryUseCase get saveTimesheetEntryUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#saveTimesheetEntryUseCase),
        returnValue: _FakeSaveTimesheetEntryUseCase_0(
          this,
          Invocation.getter(#saveTimesheetEntryUseCase),
        ),
      ) as _i2.SaveTimesheetEntryUseCase);

  @override
  _i3.DeleteTimesheetEntryUsecase get deleteTimesheetEntryUsecase =>
      (super.noSuchMethod(
        Invocation.getter(#deleteTimesheetEntryUsecase),
        returnValue: _FakeDeleteTimesheetEntryUsecase_1(
          this,
          Invocation.getter(#deleteTimesheetEntryUsecase),
        ),
      ) as _i3.DeleteTimesheetEntryUsecase);

  @override
  _i4.GetTodayTimesheetEntryUseCase get getTodayTimesheetEntryUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#getTodayTimesheetEntryUseCase),
        returnValue: _FakeGetTodayTimesheetEntryUseCase_2(
          this,
          Invocation.getter(#getTodayTimesheetEntryUseCase),
        ),
      ) as _i4.GetTodayTimesheetEntryUseCase);

  @override
  _i5.GenerateMonthlyTimesheetUseCase get generateMonthlyTimesheetUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#generateMonthlyTimesheetUseCase),
        returnValue: _FakeGenerateMonthlyTimesheetUseCase_3(
          this,
          Invocation.getter(#generateMonthlyTimesheetUseCase),
        ),
      ) as _i5.GenerateMonthlyTimesheetUseCase);

  @override
  _i6.PreferencesBloc get preferencesBloc => (super.noSuchMethod(
        Invocation.getter(#preferencesBloc),
        returnValue: _FakePreferencesBloc_4(
          this,
          Invocation.getter(#preferencesBloc),
        ),
      ) as _i6.PreferencesBloc);

  @override
  _i7.GetWeeklyWorkTimeUseCase get getWeeklyWorkTimeUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#getWeeklyWorkTimeUseCase),
        returnValue: _FakeGetWeeklyWorkTimeUseCase_5(
          this,
          Invocation.getter(#getWeeklyWorkTimeUseCase),
        ),
      ) as _i7.GetWeeklyWorkTimeUseCase);

  @override
  _i8.GetRemainingVacationDaysUseCase get getRemainingVacationDaysUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#getRemainingVacationDaysUseCase),
        returnValue: _FakeGetRemainingVacationDaysUseCase_6(
          this,
          Invocation.getter(#getRemainingVacationDaysUseCase),
        ),
      ) as _i8.GetRemainingVacationDaysUseCase);

  @override
  _i9.GetOvertimeHoursUseCase get getOvertimeHoursUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#getOvertimeHoursUseCase),
        returnValue: _FakeGetOvertimeHoursUseCase_7(
          this,
          Invocation.getter(#getOvertimeHoursUseCase),
        ),
      ) as _i9.GetOvertimeHoursUseCase);

  @override
  _i10.SignalerAbsencePeriodeUsecase get signalerAbsencePeriodeUsecase =>
      (super.noSuchMethod(
        Invocation.getter(#signalerAbsencePeriodeUsecase),
        returnValue: _FakeSignalerAbsencePeriodeUsecase_8(
          this,
          Invocation.getter(#signalerAbsencePeriodeUsecase),
        ),
      ) as _i10.SignalerAbsencePeriodeUsecase);

  @override
  _i11.GetMonthlyTimesheetEntriesUseCase
      get getMonthlyTimesheetEntriesUseCase => (super.noSuchMethod(
            Invocation.getter(#getMonthlyTimesheetEntriesUseCase),
            returnValue: _FakeGetMonthlyTimesheetEntriesUseCase_9(
              this,
              Invocation.getter(#getMonthlyTimesheetEntriesUseCase),
            ),
          ) as _i11.GetMonthlyTimesheetEntriesUseCase);

  @override
  _i12.TimeSheetState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTimeSheetState_10(
          this,
          Invocation.getter(#state),
        ),
      ) as _i12.TimeSheetState);

  @override
  _i18.Stream<_i12.TimeSheetState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i18.Stream<_i12.TimeSheetState>.empty(),
      ) as _i18.Stream<_i12.TimeSheetState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i18.Future<bool> hasCheckedInForDate(DateTime? date) => (super.noSuchMethod(
        Invocation.method(
          #hasCheckedInForDate,
          [date],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  void add(_i12.TimeSheetEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i12.TimeSheetEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i12.TimeSheetState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i12.TimeSheetEvent>(
    _i25.EventHandler<E, _i12.TimeSheetState>? handler, {
    _i25.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i25.Transition<_i12.TimeSheetEvent, _i12.TimeSheetState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i18.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  void onChange(_i25.Change<_i12.TimeSheetState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PreferencesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferencesBloc extends _i1.Mock implements _i6.PreferencesBloc {
  MockPreferencesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.GetUserPreferenceUseCase get getUserPreferenceUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#getUserPreferenceUseCase),
        returnValue: _FakeGetUserPreferenceUseCase_11(
          this,
          Invocation.getter(#getUserPreferenceUseCase),
        ),
      ) as _i13.GetUserPreferenceUseCase);

  @override
  _i14.SetUserPreferenceUseCase get setUserPreferenceUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#setUserPreferenceUseCase),
        returnValue: _FakeSetUserPreferenceUseCase_12(
          this,
          Invocation.getter(#setUserPreferenceUseCase),
        ),
      ) as _i14.SetUserPreferenceUseCase);

  @override
  _i15.RegisterManagerUseCase get registerManagerUseCase => (super.noSuchMethod(
        Invocation.getter(#registerManagerUseCase),
        returnValue: _FakeRegisterManagerUseCase_13(
          this,
          Invocation.getter(#registerManagerUseCase),
        ),
      ) as _i15.RegisterManagerUseCase);

  @override
  _i16.UnregisterManagerUseCase get unregisterManagerUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#unregisterManagerUseCase),
        returnValue: _FakeUnregisterManagerUseCase_14(
          this,
          Invocation.getter(#unregisterManagerUseCase),
        ),
      ) as _i16.UnregisterManagerUseCase);

  @override
  _i6.PreferencesState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i26.dummyValue<_i6.PreferencesState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.PreferencesState);

  @override
  _i18.Stream<_i6.PreferencesState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i18.Stream<_i6.PreferencesState>.empty(),
      ) as _i18.Stream<_i6.PreferencesState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i18.Future<_i27.Uint8List?> getCurrentSignature() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentSignature,
          [],
        ),
        returnValue: _i18.Future<_i27.Uint8List?>.value(),
      ) as _i18.Future<_i27.Uint8List?>);

  @override
  void add(_i6.PreferencesEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i6.PreferencesEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i6.PreferencesState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i6.PreferencesEvent>(
    _i25.EventHandler<E, _i6.PreferencesState>? handler, {
    _i25.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i25.Transition<_i6.PreferencesEvent, _i6.PreferencesState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i18.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  void onChange(_i25.Change<_i6.PreferencesState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TimerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimerService extends _i1.Mock implements _i28.TimerService {
  MockTimerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get accumulatedTime => (super.noSuchMethod(
        Invocation.getter(#accumulatedTime),
        returnValue: _FakeDuration_15(
          this,
          Invocation.getter(#accumulatedTime),
        ),
      ) as Duration);

  @override
  Duration get elapsedTime => (super.noSuchMethod(
        Invocation.getter(#elapsedTime),
        returnValue: _FakeDuration_15(
          this,
          Invocation.getter(#elapsedTime),
        ),
      ) as Duration);

  @override
  String get currentState => (super.noSuchMethod(
        Invocation.getter(#currentState),
        returnValue: _i26.dummyValue<String>(
          this,
          Invocation.getter(#currentState),
        ),
      ) as String);

  @override
  bool get isWeekendDay => (super.noSuchMethod(
        Invocation.getter(#isWeekendDay),
        returnValue: false,
      ) as bool);

  @override
  bool get weekendOvertimeEnabled => (super.noSuchMethod(
        Invocation.getter(#weekendOvertimeEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get isOvertimeSession => (super.noSuchMethod(
        Invocation.getter(#isOvertimeSession),
        returnValue: false,
      ) as bool);

  @override
  _i18.Future<void> initialize(
    String? etatActuel,
    DateTime? dernierPointage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [
            etatActuel,
            dernierPointage,
          ],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  void updateState(
    String? newState,
    DateTime? dernierPointage,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateState,
          [
            newState,
            dernierPointage,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void appPaused() => super.noSuchMethod(
        Invocation.method(
          #appPaused,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void appResumed() => super.noSuchMethod(
        Invocation.method(
          #appResumed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i18.Future<void> refreshWeekendConfiguration() => (super.noSuchMethod(
        Invocation.method(
          #refreshWeekendConfiguration,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  Map<String, dynamic> getOvertimeInfo() => (super.noSuchMethod(
        Invocation.method(
          #getOvertimeInfo,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AndroidFlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidFlutterLocalNotificationsPlugin extends _i1.Mock
    implements _i29.AndroidFlutterLocalNotificationsPlugin {
  MockAndroidFlutterLocalNotificationsPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Future<bool> initialize(
    _i30.AndroidInitializationSettings? initializationSettings, {
    _i20.DidReceiveNotificationResponseCallback?
        onDidReceiveNotificationResponse,
    _i20.DidReceiveBackgroundNotificationResponseCallback?
        onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [initializationSettings],
          {
            #onDidReceiveNotificationResponse: onDidReceiveNotificationResponse,
            #onDidReceiveBackgroundNotificationResponse:
                onDidReceiveBackgroundNotificationResponse,
          },
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool?> requestExactAlarmsPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestExactAlarmsPermission,
          [],
        ),
        returnValue: _i18.Future<bool?>.value(),
      ) as _i18.Future<bool?>);

  @override
  _i18.Future<bool?> requestFullScreenIntentPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestFullScreenIntentPermission,
          [],
        ),
        returnValue: _i18.Future<bool?>.value(),
      ) as _i18.Future<bool?>);

  @override
  _i18.Future<bool?> requestNotificationsPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestNotificationsPermission,
          [],
        ),
        returnValue: _i18.Future<bool?>.value(),
      ) as _i18.Future<bool?>);

  @override
  _i18.Future<bool?> requestNotificationPolicyAccess() => (super.noSuchMethod(
        Invocation.method(
          #requestNotificationPolicyAccess,
          [],
        ),
        returnValue: _i18.Future<bool?>.value(),
      ) as _i18.Future<bool?>);

  @override
  _i18.Future<bool?> hasNotificationPolicyAccess() => (super.noSuchMethod(
        Invocation.method(
          #hasNotificationPolicyAccess,
          [],
        ),
        returnValue: _i18.Future<bool?>.value(),
      ) as _i18.Future<bool?>);

  @override
  _i18.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i22.TZDateTime? scheduledDate,
    _i31.AndroidNotificationDetails? notificationDetails, {
    required _i23.AndroidScheduleMode? scheduleMode,
    String? payload,
    _i24.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #zonedSchedule,
          [
            id,
            title,
            body,
            scheduledDate,
            notificationDetails,
          ],
          {
            #scheduleMode: scheduleMode,
            #payload: payload,
            #matchDateTimeComponents: matchDateTimeComponents,
          },
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> startForegroundService(
    int? id,
    String? title,
    String? body, {
    _i31.AndroidNotificationDetails? notificationDetails,
    String? payload,
    _i32.AndroidServiceStartType? startType =
        _i32.AndroidServiceStartType.startSticky,
    Set<_i32.AndroidServiceForegroundType>? foregroundServiceTypes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startForegroundService,
          [
            id,
            title,
            body,
          ],
          {
            #notificationDetails: notificationDetails,
            #payload: payload,
            #startType: startType,
            #foregroundServiceTypes: foregroundServiceTypes,
          },
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> stopForegroundService() => (super.noSuchMethod(
        Invocation.method(
          #stopForegroundService,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> show(
    int? id,
    String? title,
    String? body, {
    _i31.AndroidNotificationDetails? notificationDetails,
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #show,
          [
            id,
            title,
            body,
          ],
          {
            #notificationDetails: notificationDetails,
            #payload: payload,
          },
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i20.RepeatInterval? repeatInterval, {
    _i31.AndroidNotificationDetails? notificationDetails,
    String? payload,
    _i23.AndroidScheduleMode? scheduleMode = _i23.AndroidScheduleMode.exact,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #periodicallyShow,
          [
            id,
            title,
            body,
            repeatInterval,
          ],
          {
            #notificationDetails: notificationDetails,
            #payload: payload,
            #scheduleMode: scheduleMode,
          },
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> periodicallyShowWithDuration(
    int? id,
    String? title,
    String? body,
    Duration? repeatDurationInterval, {
    _i31.AndroidNotificationDetails? notificationDetails,
    String? payload,
    _i23.AndroidScheduleMode? scheduleMode = _i23.AndroidScheduleMode.exact,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #periodicallyShowWithDuration,
          [
            id,
            title,
            body,
            repeatDurationInterval,
          ],
          {
            #notificationDetails: notificationDetails,
            #payload: payload,
            #scheduleMode: scheduleMode,
          },
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> cancel(
    int? id, {
    String? tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [id],
          {#tag: tag},
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> createNotificationChannelGroup(
          _i33.AndroidNotificationChannelGroup? notificationChannelGroup) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNotificationChannelGroup,
          [notificationChannelGroup],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> deleteNotificationChannelGroup(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteNotificationChannelGroup,
          [groupId],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> createNotificationChannel(
          _i34.AndroidNotificationChannel? notificationChannel) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNotificationChannel,
          [notificationChannel],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> deleteNotificationChannel(String? channelId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteNotificationChannel,
          [channelId],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<_i35.MessagingStyleInformation?>
      getActiveNotificationMessagingStyle(
    int? id, {
    String? tag,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getActiveNotificationMessagingStyle,
              [id],
              {#tag: tag},
            ),
            returnValue: _i18.Future<_i35.MessagingStyleInformation?>.value(),
          ) as _i18.Future<_i35.MessagingStyleInformation?>);

  @override
  _i18.Future<List<_i34.AndroidNotificationChannel>?>
      getNotificationChannels() => (super.noSuchMethod(
            Invocation.method(
              #getNotificationChannels,
              [],
            ),
            returnValue:
                _i18.Future<List<_i34.AndroidNotificationChannel>?>.value(),
          ) as _i18.Future<List<_i34.AndroidNotificationChannel>?>);

  @override
  _i18.Future<bool?> areNotificationsEnabled() => (super.noSuchMethod(
        Invocation.method(
          #areNotificationsEnabled,
          [],
        ),
        returnValue: _i18.Future<bool?>.value(),
      ) as _i18.Future<bool?>);

  @override
  _i18.Future<bool?> canScheduleExactNotifications() => (super.noSuchMethod(
        Invocation.method(
          #canScheduleExactNotifications,
          [],
        ),
        returnValue: _i18.Future<bool?>.value(),
      ) as _i18.Future<bool?>);

  @override
  _i18.Future<void> cancelAll() => (super.noSuchMethod(
        Invocation.method(
          #cancelAll,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> cancelAllPendingNotifications() => (super.noSuchMethod(
        Invocation.method(
          #cancelAllPendingNotifications,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<_i20.NotificationAppLaunchDetails?>
      getNotificationAppLaunchDetails() => (super.noSuchMethod(
            Invocation.method(
              #getNotificationAppLaunchDetails,
              [],
            ),
            returnValue:
                _i18.Future<_i20.NotificationAppLaunchDetails?>.value(),
          ) as _i18.Future<_i20.NotificationAppLaunchDetails?>);

  @override
  _i18.Future<List<_i20.PendingNotificationRequest>>
      pendingNotificationRequests() => (super.noSuchMethod(
            Invocation.method(
              #pendingNotificationRequests,
              [],
            ),
            returnValue:
                _i18.Future<List<_i20.PendingNotificationRequest>>.value(
                    <_i20.PendingNotificationRequest>[]),
          ) as _i18.Future<List<_i20.PendingNotificationRequest>>);

  @override
  _i18.Future<List<_i20.ActiveNotification>> getActiveNotifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveNotifications,
          [],
        ),
        returnValue: _i18.Future<List<_i20.ActiveNotification>>.value(
            <_i20.ActiveNotification>[]),
      ) as _i18.Future<List<_i20.ActiveNotification>>);
}

/// A class which mocks [IOSFlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockIOSFlutterLocalNotificationsPlugin extends _i1.Mock
    implements _i29.IOSFlutterLocalNotificationsPlugin {
  MockIOSFlutterLocalNotificationsPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Future<bool?> initialize(
    _i36.DarwinInitializationSettings? initializationSettings, {
    _i20.DidReceiveNotificationResponseCallback?
        onDidReceiveNotificationResponse,
    _i20.DidReceiveBackgroundNotificationResponseCallback?
        onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [initializationSettings],
          {
            #onDidReceiveNotificationResponse: onDidReceiveNotificationResponse,
            #onDidReceiveBackgroundNotificationResponse:
                onDidReceiveBackgroundNotificationResponse,
          },
        ),
        returnValue: _i18.Future<bool?>.value(),
      ) as _i18.Future<bool?>);

  @override
  _i18.Future<bool?> requestPermissions({
    bool? sound = false,
    bool? alert = false,
    bool? badge = false,
    bool? provisional = false,
    bool? critical = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestPermissions,
          [],
          {
            #sound: sound,
            #alert: alert,
            #badge: badge,
            #provisional: provisional,
            #critical: critical,
          },
        ),
        returnValue: _i18.Future<bool?>.value(),
      ) as _i18.Future<bool?>);

  @override
  _i18.Future<_i37.NotificationsEnabledOptions?> checkPermissions() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkPermissions,
          [],
        ),
        returnValue: _i18.Future<_i37.NotificationsEnabledOptions?>.value(),
      ) as _i18.Future<_i37.NotificationsEnabledOptions?>);

  @override
  _i18.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i22.TZDateTime? scheduledDate,
    _i38.DarwinNotificationDetails? notificationDetails, {
    String? payload,
    _i24.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #zonedSchedule,
          [
            id,
            title,
            body,
            scheduledDate,
            notificationDetails,
          ],
          {
            #payload: payload,
            #matchDateTimeComponents: matchDateTimeComponents,
          },
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> show(
    int? id,
    String? title,
    String? body, {
    _i38.DarwinNotificationDetails? notificationDetails,
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #show,
          [
            id,
            title,
            body,
          ],
          {
            #notificationDetails: notificationDetails,
            #payload: payload,
          },
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i20.RepeatInterval? repeatInterval, {
    _i38.DarwinNotificationDetails? notificationDetails,
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #periodicallyShow,
          [
            id,
            title,
            body,
            repeatInterval,
          ],
          {
            #notificationDetails: notificationDetails,
            #payload: payload,
          },
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> periodicallyShowWithDuration(
    int? id,
    String? title,
    String? body,
    Duration? repeatDurationInterval, {
    _i38.DarwinNotificationDetails? notificationDetails,
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #periodicallyShowWithDuration,
          [
            id,
            title,
            body,
            repeatDurationInterval,
          ],
          {
            #notificationDetails: notificationDetails,
            #payload: payload,
          },
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> cancel(int? id) => (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [id],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> cancelAll() => (super.noSuchMethod(
        Invocation.method(
          #cancelAll,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<void> cancelAllPendingNotifications() => (super.noSuchMethod(
        Invocation.method(
          #cancelAllPendingNotifications,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  _i18.Future<_i20.NotificationAppLaunchDetails?>
      getNotificationAppLaunchDetails() => (super.noSuchMethod(
            Invocation.method(
              #getNotificationAppLaunchDetails,
              [],
            ),
            returnValue:
                _i18.Future<_i20.NotificationAppLaunchDetails?>.value(),
          ) as _i18.Future<_i20.NotificationAppLaunchDetails?>);

  @override
  _i18.Future<List<_i20.PendingNotificationRequest>>
      pendingNotificationRequests() => (super.noSuchMethod(
            Invocation.method(
              #pendingNotificationRequests,
              [],
            ),
            returnValue:
                _i18.Future<List<_i20.PendingNotificationRequest>>.value(
                    <_i20.PendingNotificationRequest>[]),
          ) as _i18.Future<List<_i20.PendingNotificationRequest>>);

  @override
  _i18.Future<List<_i20.ActiveNotification>> getActiveNotifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveNotifications,
          [],
        ),
        returnValue: _i18.Future<List<_i20.ActiveNotification>>.value(
            <_i20.ActiveNotification>[]),
      ) as _i18.Future<List<_i20.ActiveNotification>>);
}
