// Mocks generated by Mockito 5.4.4 from annotations
// in time_sheet/test/comprehensive_clock_reminder_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_local_notifications/src/flutter_local_notifications_plugin.dart'
    as _i6;
import 'package:flutter_local_notifications/src/initialization_settings.dart'
    as _i7;
import 'package:flutter_local_notifications/src/notification_details.dart'
    as _i9;
import 'package:flutter_local_notifications/src/platform_specifics/android/schedule_mode.dart'
    as _i11;
import 'package:flutter_local_notifications/src/types.dart' as _i12;
import 'package:flutter_local_notifications_platform_interface/flutter_local_notifications_platform_interface.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:time_sheet/services/timer_service.dart' as _i2;
import 'package:time_sheet/services/weekend_detection_service.dart' as _i5;
import 'package:timezone/timezone.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TimerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimerService extends _i1.Mock implements _i2.TimerService {
  MockTimerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get accumulatedTime => (super.noSuchMethod(
        Invocation.getter(#accumulatedTime),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#accumulatedTime),
        ),
      ) as Duration);

  @override
  Duration get elapsedTime => (super.noSuchMethod(
        Invocation.getter(#elapsedTime),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#elapsedTime),
        ),
      ) as Duration);

  @override
  String get currentState => (super.noSuchMethod(
        Invocation.getter(#currentState),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#currentState),
        ),
      ) as String);

  @override
  bool get isWeekendDay => (super.noSuchMethod(
        Invocation.getter(#isWeekendDay),
        returnValue: false,
      ) as bool);

  @override
  bool get weekendOvertimeEnabled => (super.noSuchMethod(
        Invocation.getter(#weekendOvertimeEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get isOvertimeSession => (super.noSuchMethod(
        Invocation.getter(#isOvertimeSession),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> initialize(
    String? etatActuel,
    DateTime? dernierPointage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [
            etatActuel,
            dernierPointage,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void updateState(
    String? newState,
    DateTime? dernierPointage,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateState,
          [
            newState,
            dernierPointage,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void appPaused() => super.noSuchMethod(
        Invocation.method(
          #appPaused,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void appResumed() => super.noSuchMethod(
        Invocation.method(
          #appResumed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> refreshWeekendConfiguration() => (super.noSuchMethod(
        Invocation.method(
          #refreshWeekendConfiguration,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  Map<String, dynamic> getOvertimeInfo() => (super.noSuchMethod(
        Invocation.method(
          #getOvertimeInfo,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [WeekendDetectionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeekendDetectionService extends _i1.Mock
    implements _i5.WeekendDetectionService {
  MockWeekendDetectionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isWeekend(
    DateTime? date, {
    List<int>? customWeekendDays,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isWeekend,
          [date],
          {#customWeekendDays: customWeekendDays},
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<List<int>> getConfiguredWeekendDays() => (super.noSuchMethod(
        Invocation.method(
          #getConfiguredWeekendDays,
          [],
        ),
        returnValue: _i4.Future<List<int>>.value(<int>[]),
      ) as _i4.Future<List<int>>);

  @override
  _i4.Future<void> updateWeekendConfiguration(List<int>? weekendDays) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateWeekendConfiguration,
          [weekendDays],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> shouldApplyWeekendOvertime(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #shouldApplyWeekendOvertime,
          [date],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> isWeekendOvertimeEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isWeekendOvertimeEnabled,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setWeekendOvertimeEnabled(bool? enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setWeekendOvertimeEnabled,
          [enabled],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> resetToDefaults() => (super.noSuchMethod(
        Invocation.method(
          #resetToDefaults,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void clearCache() => super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterLocalNotificationsPlugin extends _i1.Mock
    implements _i6.FlutterLocalNotificationsPlugin {
  MockFlutterLocalNotificationsPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool?> initialize(
    _i7.InitializationSettings? initializationSettings, {
    _i8.DidReceiveNotificationResponseCallback?
        onDidReceiveNotificationResponse,
    _i8.DidReceiveBackgroundNotificationResponseCallback?
        onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [initializationSettings],
          {
            #onDidReceiveNotificationResponse: onDidReceiveNotificationResponse,
            #onDidReceiveBackgroundNotificationResponse:
                onDidReceiveBackgroundNotificationResponse,
          },
        ),
        returnValue: _i4.Future<bool?>.value(),
      ) as _i4.Future<bool?>);

  @override
  _i4.Future<_i8.NotificationAppLaunchDetails?>
      getNotificationAppLaunchDetails() => (super.noSuchMethod(
            Invocation.method(
              #getNotificationAppLaunchDetails,
              [],
            ),
            returnValue: _i4.Future<_i8.NotificationAppLaunchDetails?>.value(),
          ) as _i4.Future<_i8.NotificationAppLaunchDetails?>);

  @override
  _i4.Future<void> show(
    int? id,
    String? title,
    String? body,
    _i9.NotificationDetails? notificationDetails, {
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #show,
          [
            id,
            title,
            body,
            notificationDetails,
          ],
          {#payload: payload},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancel(
    int? id, {
    String? tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [id],
          {#tag: tag},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancelAll() => (super.noSuchMethod(
        Invocation.method(
          #cancelAll,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancelAllPendingNotifications() => (super.noSuchMethod(
        Invocation.method(
          #cancelAllPendingNotifications,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i10.TZDateTime? scheduledDate,
    _i9.NotificationDetails? notificationDetails, {
    required _i11.AndroidScheduleMode? androidScheduleMode,
    String? payload,
    _i12.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #zonedSchedule,
          [
            id,
            title,
            body,
            scheduledDate,
            notificationDetails,
          ],
          {
            #androidScheduleMode: androidScheduleMode,
            #payload: payload,
            #matchDateTimeComponents: matchDateTimeComponents,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i8.RepeatInterval? repeatInterval,
    _i9.NotificationDetails? notificationDetails, {
    required _i11.AndroidScheduleMode? androidScheduleMode,
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #periodicallyShow,
          [
            id,
            title,
            body,
            repeatInterval,
            notificationDetails,
          ],
          {
            #androidScheduleMode: androidScheduleMode,
            #payload: payload,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> periodicallyShowWithDuration(
    int? id,
    String? title,
    String? body,
    Duration? repeatDurationInterval,
    _i9.NotificationDetails? notificationDetails, {
    _i11.AndroidScheduleMode? androidScheduleMode =
        _i11.AndroidScheduleMode.exact,
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #periodicallyShowWithDuration,
          [
            id,
            title,
            body,
            repeatDurationInterval,
            notificationDetails,
          ],
          {
            #androidScheduleMode: androidScheduleMode,
            #payload: payload,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i8.PendingNotificationRequest>>
      pendingNotificationRequests() => (super.noSuchMethod(
            Invocation.method(
              #pendingNotificationRequests,
              [],
            ),
            returnValue: _i4.Future<List<_i8.PendingNotificationRequest>>.value(
                <_i8.PendingNotificationRequest>[]),
          ) as _i4.Future<List<_i8.PendingNotificationRequest>>);

  @override
  _i4.Future<List<_i8.ActiveNotification>> getActiveNotifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveNotifications,
          [],
        ),
        returnValue: _i4.Future<List<_i8.ActiveNotification>>.value(
            <_i8.ActiveNotification>[]),
      ) as _i4.Future<List<_i8.ActiveNotification>>);
}
