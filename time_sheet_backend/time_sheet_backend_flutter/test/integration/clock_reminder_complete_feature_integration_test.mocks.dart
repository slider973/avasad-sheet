// Mocks generated by Mockito 5.4.4 from annotations
// in time_sheet/test/integration/clock_reminder_complete_feature_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:flutter_local_notifications/flutter_local_notifications.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:time_sheet/enum/reminder_type.dart' as _i11;
import 'package:time_sheet/features/pointage/presentation/pages/time-sheet/bloc/time_sheet/time_sheet_bloc.dart'
    as _i4;
import 'package:time_sheet/features/preference/data/models/reminder_notification.dart'
    as _i2;
import 'package:time_sheet/features/preference/data/models/reminder_settings.dart'
    as _i10;
import 'package:time_sheet/features/preference/presentation/manager/preferences_bloc.dart'
    as _i5;
import 'package:time_sheet/services/clock_reminder_service.dart' as _i6;
import 'package:time_sheet/services/ios_notification_service.dart' as _i12;
import 'package:time_sheet/services/timer_service.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeReminderNotification_0 extends _i1.SmartFake
    implements _i2.ReminderNotification {
  _FakeReminderNotification_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_1 extends _i1.SmartFake implements Duration {
  _FakeDuration_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlutterLocalNotificationsPlugin_2 extends _i1.SmartFake
    implements _i3.FlutterLocalNotificationsPlugin {
  _FakeFlutterLocalNotificationsPlugin_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTimeSheetBloc_3 extends _i1.SmartFake implements _i4.TimeSheetBloc {
  _FakeTimeSheetBloc_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePreferencesBloc_4 extends _i1.SmartFake
    implements _i5.PreferencesBloc {
  _FakePreferencesBloc_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ClockReminderService].
///
/// See the documentation for Mockito's code generation for more information.
class MockClockReminderService extends _i1.Mock
    implements _i6.ClockReminderService {
  MockClockReminderService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  String get lastKnownClockStatus => (super.noSuchMethod(
        Invocation.getter(#lastKnownClockStatus),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#lastKnownClockStatus),
        ),
      ) as String);

  @override
  Map<String, _i2.ReminderNotification> get scheduledReminders =>
      (super.noSuchMethod(
        Invocation.getter(#scheduledReminders),
        returnValue: <String, _i2.ReminderNotification>{},
      ) as Map<String, _i2.ReminderNotification>);

  @override
  bool get isInBackground => (super.noSuchMethod(
        Invocation.getter(#isInBackground),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<void> initialize({_i9.TimerService? timerService}) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
          {#timerService: timerService},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> scheduleReminders(_i10.ReminderSettings? settings) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleReminders,
          [settings],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> cancelAllReminders() => (super.noSuchMethod(
        Invocation.method(
          #cancelAllReminders,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> onClockStatusChanged(String? status) => (super.noSuchMethod(
        Invocation.method(
          #onClockStatusChanged,
          [status],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> onTimeSheetStateChanged(String? clockStatus) =>
      (super.noSuchMethod(
        Invocation.method(
          #onTimeSheetStateChanged,
          [clockStatus],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> snoozeReminder(
    int? notificationId,
    _i11.ReminderType? type,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #snoozeReminder,
          [
            notificationId,
            type,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> shouldSendReminder(_i11.ReminderType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #shouldSendReminder,
          [type],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> onAppBackground() => (super.noSuchMethod(
        Invocation.method(
          #onAppBackground,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> onAppForeground() => (super.noSuchMethod(
        Invocation.method(
          #onAppForeground,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> handleNotificationInteraction(String? payload) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleNotificationInteraction,
          [payload],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> handleNotificationTap(String? payload) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleNotificationTap,
          [payload],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> dismissNotification(int? notificationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #dismissNotification,
          [notificationId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> snoozeNotification(
    _i2.ReminderNotification? notification,
    int? minutes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #snoozeNotification,
          [
            notification,
            minutes,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> shouldSendReminderOnDay(
    DateTime? date,
    _i10.ReminderSettings? settings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #shouldSendReminderOnDay,
          [
            date,
            settings,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i2.ReminderNotification createReminderNotification(
    _i11.ReminderType? type,
    DateTime? scheduledTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createReminderNotification,
          [
            type,
            scheduledTime,
          ],
        ),
        returnValue: _FakeReminderNotification_0(
          this,
          Invocation.method(
            #createReminderNotification,
            [
              type,
              scheduledTime,
            ],
          ),
        ),
      ) as _i2.ReminderNotification);

  @override
  _i8.Future<void> updateSettings(_i10.ReminderSettings? newSettings) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSettings,
          [newSettings],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> checkNotificationPermissions() => (super.noSuchMethod(
        Invocation.method(
          #checkNotificationPermissions,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> onAppBackgroundWithTracking() => (super.noSuchMethod(
        Invocation.method(
          #onAppBackgroundWithTracking,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> onAppForegroundWithTracking() => (super.noSuchMethod(
        Invocation.method(
          #onAppForegroundWithTracking,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> handleNotificationInteractionWithTracking(String? payload) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleNotificationInteractionWithTracking,
          [payload],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  Map<String, dynamic> getReminderStats() => (super.noSuchMethod(
        Invocation.method(
          #getReminderStats,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [TimerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimerService extends _i1.Mock implements _i9.TimerService {
  MockTimerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get accumulatedTime => (super.noSuchMethod(
        Invocation.getter(#accumulatedTime),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#accumulatedTime),
        ),
      ) as Duration);

  @override
  Duration get elapsedTime => (super.noSuchMethod(
        Invocation.getter(#elapsedTime),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#elapsedTime),
        ),
      ) as Duration);

  @override
  String get currentState => (super.noSuchMethod(
        Invocation.getter(#currentState),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#currentState),
        ),
      ) as String);

  @override
  bool get isWeekendDay => (super.noSuchMethod(
        Invocation.getter(#isWeekendDay),
        returnValue: false,
      ) as bool);

  @override
  bool get weekendOvertimeEnabled => (super.noSuchMethod(
        Invocation.getter(#weekendOvertimeEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get isOvertimeSession => (super.noSuchMethod(
        Invocation.getter(#isOvertimeSession),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<void> initialize(
    String? etatActuel,
    DateTime? dernierPointage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [
            etatActuel,
            dernierPointage,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void updateState(
    String? newState,
    DateTime? dernierPointage,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateState,
          [
            newState,
            dernierPointage,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void appPaused() => super.noSuchMethod(
        Invocation.method(
          #appPaused,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void appResumed() => super.noSuchMethod(
        Invocation.method(
          #appResumed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> refreshWeekendConfiguration() => (super.noSuchMethod(
        Invocation.method(
          #refreshWeekendConfiguration,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  Map<String, dynamic> getOvertimeInfo() => (super.noSuchMethod(
        Invocation.method(
          #getOvertimeInfo,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DynamicMultiplatformNotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDynamicMultiplatformNotificationService extends _i1.Mock
    implements _i12.DynamicMultiplatformNotificationService {
  MockDynamicMultiplatformNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FlutterLocalNotificationsPlugin get flutterLocalNotificationsPlugin =>
      (super.noSuchMethod(
        Invocation.getter(#flutterLocalNotificationsPlugin),
        returnValue: _FakeFlutterLocalNotificationsPlugin_2(
          this,
          Invocation.getter(#flutterLocalNotificationsPlugin),
        ),
      ) as _i3.FlutterLocalNotificationsPlugin);

  @override
  _i4.TimeSheetBloc get timeSheetBloc => (super.noSuchMethod(
        Invocation.getter(#timeSheetBloc),
        returnValue: _FakeTimeSheetBloc_3(
          this,
          Invocation.getter(#timeSheetBloc),
        ),
      ) as _i4.TimeSheetBloc);

  @override
  _i5.PreferencesBloc get preferencesBloc => (super.noSuchMethod(
        Invocation.getter(#preferencesBloc),
        returnValue: _FakePreferencesBloc_4(
          this,
          Invocation.getter(#preferencesBloc),
        ),
      ) as _i5.PreferencesBloc);

  @override
  _i8.Future<void> initNotifications() => (super.noSuchMethod(
        Invocation.method(
          #initNotifications,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> testNotification() => (super.noSuchMethod(
        Invocation.method(
          #testNotification,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> onAppClosed() => (super.noSuchMethod(
        Invocation.method(
          #onAppClosed,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> onAppOpened() => (super.noSuchMethod(
        Invocation.method(
          #onAppOpened,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> scheduleReminderNotification(
    _i2.ReminderNotification? reminder,
    _i10.ReminderSettings? settings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleReminderNotification,
          [
            reminder,
            settings,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> cancelReminderNotification(dynamic notificationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelReminderNotification,
          [notificationId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> cancelAllReminderNotifications() => (super.noSuchMethod(
        Invocation.method(
          #cancelAllReminderNotifications,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> snoozeReminderNotification(
    _i2.ReminderNotification? reminder,
    _i10.ReminderSettings? settings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #snoozeReminderNotification,
          [
            reminder,
            settings,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> requestNotificationPermissions() => (super.noSuchMethod(
        Invocation.method(
          #requestNotificationPermissions,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<List<_i3.PendingNotificationRequest>>
      getPendingReminderNotifications() => (super.noSuchMethod(
            Invocation.method(
              #getPendingReminderNotifications,
              [],
            ),
            returnValue: _i8.Future<List<_i3.PendingNotificationRequest>>.value(
                <_i3.PendingNotificationRequest>[]),
          ) as _i8.Future<List<_i3.PendingNotificationRequest>>);

  @override
  _i8.Future<bool> testBackgroundNotificationDelivery() => (super.noSuchMethod(
        Invocation.method(
          #testBackgroundNotificationDelivery,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> optimizeNotificationDelivery() => (super.noSuchMethod(
        Invocation.method(
          #optimizeNotificationDelivery,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}
