// Mocks generated by Mockito 5.4.4 from annotations
// in time_sheet/test/integration/timesheet_bloc_extended_timer_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:math' as _i3;
import 'dart:typed_data' as _i24;

import 'package:flutter_bloc/flutter_bloc.dart' as _i25;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i23;
import 'package:time_sheet/features/pointage/domain/entities/timesheet_entry.dart'
    as _i12;
import 'package:time_sheet/features/pointage/domain/entities/timesheet_generation_config.dart'
    as _i15;
import 'package:time_sheet/features/pointage/domain/repositories/timesheet_repository.dart'
    as _i2;
import 'package:time_sheet/features/pointage/domain/use_cases/delete_timesheet_entry_usecase.dart'
    as _i13;
import 'package:time_sheet/features/pointage/domain/use_cases/generate_monthly_timesheet_usease.dart'
    as _i14;
import 'package:time_sheet/features/pointage/domain/use_cases/get_monthly_timesheet_entries_usecase.dart'
    as _i21;
import 'package:time_sheet/features/pointage/domain/use_cases/get_overtime_hours_usecase.dart'
    as _i18;
import 'package:time_sheet/features/pointage/domain/use_cases/get_remaining_vacation_days_usecase.dart'
    as _i17;
import 'package:time_sheet/features/pointage/domain/use_cases/get_today_timesheet_entry_use_case.dart'
    as _i5;
import 'package:time_sheet/features/pointage/domain/use_cases/get_weekly_work_time_usecase.dart'
    as _i16;
import 'package:time_sheet/features/pointage/domain/use_cases/save_timesheet_entry_usecase.dart'
    as _i6;
import 'package:time_sheet/features/pointage/domain/use_cases/signaler_absence_periode_usecase.dart'
    as _i19;
import 'package:time_sheet/features/pointage/domain/value_objects/vacation_days_info.dart'
    as _i4;
import 'package:time_sheet/features/pointage/presentation/pages/time-sheet/bloc/time_sheet/time_sheet_bloc.dart'
    as _i20;
import 'package:time_sheet/features/preference/domain/use_cases/get_user_preference_use_case.dart'
    as _i7;
import 'package:time_sheet/features/preference/domain/use_cases/register_manager_use_case.dart'
    as _i9;
import 'package:time_sheet/features/preference/domain/use_cases/set_user_preference_use_case.dart'
    as _i8;
import 'package:time_sheet/features/preference/domain/use_cases/unregister_manager_use_case.dart'
    as _i10;
import 'package:time_sheet/features/preference/presentation/manager/preferences_bloc.dart'
    as _i22;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTimesheetRepository_0 extends _i1.SmartFake
    implements _i2.TimesheetRepository {
  _FakeTimesheetRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRandom_1 extends _i1.SmartFake implements _i3.Random {
  _FakeRandom_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_2 extends _i1.SmartFake implements Duration {
  _FakeDuration_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVacationDaysInfo_3 extends _i1.SmartFake
    implements _i4.VacationDaysInfo {
  _FakeVacationDaysInfo_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTodayTimesheetEntryUseCase_4 extends _i1.SmartFake
    implements _i5.GetTodayTimesheetEntryUseCase {
  _FakeGetTodayTimesheetEntryUseCase_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSaveTimesheetEntryUseCase_5 extends _i1.SmartFake
    implements _i6.SaveTimesheetEntryUseCase {
  _FakeSaveTimesheetEntryUseCase_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetUserPreferenceUseCase_6 extends _i1.SmartFake
    implements _i7.GetUserPreferenceUseCase {
  _FakeGetUserPreferenceUseCase_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSetUserPreferenceUseCase_7 extends _i1.SmartFake
    implements _i8.SetUserPreferenceUseCase {
  _FakeSetUserPreferenceUseCase_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRegisterManagerUseCase_8 extends _i1.SmartFake
    implements _i9.RegisterManagerUseCase {
  _FakeRegisterManagerUseCase_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUnregisterManagerUseCase_9 extends _i1.SmartFake
    implements _i10.UnregisterManagerUseCase {
  _FakeUnregisterManagerUseCase_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SaveTimesheetEntryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveTimesheetEntryUseCase extends _i1.Mock
    implements _i6.SaveTimesheetEntryUseCase {
  MockSaveTimesheetEntryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TimesheetRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTimesheetRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TimesheetRepository);

  @override
  _i11.Future<int> execute(_i12.TimesheetEntry? entry) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [entry],
        ),
        returnValue: _i11.Future<int>.value(0),
      ) as _i11.Future<int>);
}

/// A class which mocks [DeleteTimesheetEntryUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTimesheetEntryUsecase extends _i1.Mock
    implements _i13.DeleteTimesheetEntryUsecase {
  MockDeleteTimesheetEntryUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TimesheetRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTimesheetRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TimesheetRepository);

  @override
  _i11.Future<void> execute(_i12.TimesheetEntry? entry) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [entry],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [GetTodayTimesheetEntryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTodayTimesheetEntryUseCase extends _i1.Mock
    implements _i5.GetTodayTimesheetEntryUseCase {
  MockGetTodayTimesheetEntryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TimesheetRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTimesheetRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TimesheetRepository);

  @override
  _i11.Future<_i12.TimesheetEntry?> execute([String? dateStr]) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [dateStr],
        ),
        returnValue: _i11.Future<_i12.TimesheetEntry?>.value(),
      ) as _i11.Future<_i12.TimesheetEntry?>);
}

/// A class which mocks [GenerateMonthlyTimesheetUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenerateMonthlyTimesheetUseCase extends _i1.Mock
    implements _i14.GenerateMonthlyTimesheetUseCase {
  MockGenerateMonthlyTimesheetUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TimesheetRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTimesheetRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TimesheetRepository);

  @override
  _i3.Random get random => (super.noSuchMethod(
        Invocation.getter(#random),
        returnValue: _FakeRandom_1(
          this,
          Invocation.getter(#random),
        ),
      ) as _i3.Random);

  @override
  _i11.Future<void> execute([
    _i15.TimesheetGenerationConfig? config,
    DateTime? targetMonth,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            config,
            targetMonth,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [GetWeeklyWorkTimeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWeeklyWorkTimeUseCase extends _i1.Mock
    implements _i16.GetWeeklyWorkTimeUseCase {
  MockGetWeeklyWorkTimeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<Duration> execute(String? date) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [date],
        ),
        returnValue: _i11.Future<Duration>.value(_FakeDuration_2(
          this,
          Invocation.method(
            #execute,
            [date],
          ),
        )),
      ) as _i11.Future<Duration>);
}

/// A class which mocks [GetRemainingVacationDaysUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRemainingVacationDaysUseCase extends _i1.Mock
    implements _i17.GetRemainingVacationDaysUseCase {
  MockGetRemainingVacationDaysUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i4.VacationDaysInfo> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i11.Future<_i4.VacationDaysInfo>.value(_FakeVacationDaysInfo_3(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i11.Future<_i4.VacationDaysInfo>);
}

/// A class which mocks [GetOvertimeHoursUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetOvertimeHoursUseCase extends _i1.Mock
    implements _i18.GetOvertimeHoursUseCase {
  MockGetOvertimeHoursUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<Duration> execute(
    Duration? weeklyWorkTime,
    Duration? weeklyTarget,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            weeklyWorkTime,
            weeklyTarget,
          ],
        ),
        returnValue: _i11.Future<Duration>.value(_FakeDuration_2(
          this,
          Invocation.method(
            #execute,
            [
              weeklyWorkTime,
              weeklyTarget,
            ],
          ),
        )),
      ) as _i11.Future<Duration>);
}

/// A class which mocks [SignalerAbsencePeriodeUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignalerAbsencePeriodeUsecase extends _i1.Mock
    implements _i19.SignalerAbsencePeriodeUsecase {
  MockSignalerAbsencePeriodeUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.GetTodayTimesheetEntryUseCase get getTodayTimesheetEntryUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#getTodayTimesheetEntryUseCase),
        returnValue: _FakeGetTodayTimesheetEntryUseCase_4(
          this,
          Invocation.getter(#getTodayTimesheetEntryUseCase),
        ),
      ) as _i5.GetTodayTimesheetEntryUseCase);

  @override
  _i6.SaveTimesheetEntryUseCase get saveTimesheetEntryUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#saveTimesheetEntryUseCase),
        returnValue: _FakeSaveTimesheetEntryUseCase_5(
          this,
          Invocation.getter(#saveTimesheetEntryUseCase),
        ),
      ) as _i6.SaveTimesheetEntryUseCase);

  @override
  _i11.Future<List<Map<String, _i12.TimesheetEntry>>> execute(
          _i20.TimeSheetSignalerAbsencePeriodeEvent? event) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [event],
        ),
        returnValue: _i11.Future<List<Map<String, _i12.TimesheetEntry>>>.value(
            <Map<String, _i12.TimesheetEntry>>[]),
      ) as _i11.Future<List<Map<String, _i12.TimesheetEntry>>>);
}

/// A class which mocks [GetMonthlyTimesheetEntriesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMonthlyTimesheetEntriesUseCase extends _i1.Mock
    implements _i21.GetMonthlyTimesheetEntriesUseCase {
  MockGetMonthlyTimesheetEntriesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TimesheetRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTimesheetRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TimesheetRepository);

  @override
  _i11.Future<List<_i12.TimesheetEntry>> execute(int? month) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [month],
        ),
        returnValue: _i11.Future<List<_i12.TimesheetEntry>>.value(
            <_i12.TimesheetEntry>[]),
      ) as _i11.Future<List<_i12.TimesheetEntry>>);
}

/// A class which mocks [PreferencesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferencesBloc extends _i1.Mock implements _i22.PreferencesBloc {
  MockPreferencesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.GetUserPreferenceUseCase get getUserPreferenceUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#getUserPreferenceUseCase),
        returnValue: _FakeGetUserPreferenceUseCase_6(
          this,
          Invocation.getter(#getUserPreferenceUseCase),
        ),
      ) as _i7.GetUserPreferenceUseCase);

  @override
  _i8.SetUserPreferenceUseCase get setUserPreferenceUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#setUserPreferenceUseCase),
        returnValue: _FakeSetUserPreferenceUseCase_7(
          this,
          Invocation.getter(#setUserPreferenceUseCase),
        ),
      ) as _i8.SetUserPreferenceUseCase);

  @override
  _i9.RegisterManagerUseCase get registerManagerUseCase => (super.noSuchMethod(
        Invocation.getter(#registerManagerUseCase),
        returnValue: _FakeRegisterManagerUseCase_8(
          this,
          Invocation.getter(#registerManagerUseCase),
        ),
      ) as _i9.RegisterManagerUseCase);

  @override
  _i10.UnregisterManagerUseCase get unregisterManagerUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#unregisterManagerUseCase),
        returnValue: _FakeUnregisterManagerUseCase_9(
          this,
          Invocation.getter(#unregisterManagerUseCase),
        ),
      ) as _i10.UnregisterManagerUseCase);

  @override
  _i22.PreferencesState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i23.dummyValue<_i22.PreferencesState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i22.PreferencesState);

  @override
  _i11.Stream<_i22.PreferencesState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i11.Stream<_i22.PreferencesState>.empty(),
      ) as _i11.Stream<_i22.PreferencesState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i11.Future<_i24.Uint8List?> getCurrentSignature() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentSignature,
          [],
        ),
        returnValue: _i11.Future<_i24.Uint8List?>.value(),
      ) as _i11.Future<_i24.Uint8List?>);

  @override
  void add(_i22.PreferencesEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i22.PreferencesEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i22.PreferencesState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i22.PreferencesEvent>(
    _i25.EventHandler<E, _i22.PreferencesState>? handler, {
    _i25.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i25.Transition<_i22.PreferencesEvent, _i22.PreferencesState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void onChange(_i25.Change<_i22.PreferencesState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
