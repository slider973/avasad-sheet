// Mocks generated by Mockito 5.4.4 from annotations
// in time_sheet/test/comprehensive_preferences_bloc_reminder_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:time_sheet/features/preference/domain/repositories/user_preference_repository.dart'
    as _i2;
import 'package:time_sheet/features/preference/domain/use_cases/get_user_preference_use_case.dart'
    as _i3;
import 'package:time_sheet/features/preference/domain/use_cases/register_manager_use_case.dart'
    as _i6;
import 'package:time_sheet/features/preference/domain/use_cases/set_user_preference_use_case.dart'
    as _i5;
import 'package:time_sheet/features/preference/domain/use_cases/unregister_manager_use_case.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserPreferencesRepository_0 extends _i1.SmartFake
    implements _i2.UserPreferencesRepository {
  _FakeUserPreferencesRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetUserPreferenceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserPreferenceUseCase extends _i1.Mock
    implements _i3.GetUserPreferenceUseCase {
  MockGetUserPreferenceUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserPreferencesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserPreferencesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserPreferencesRepository);

  @override
  _i4.Future<String?> execute(String? key) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [key],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
}

/// A class which mocks [SetUserPreferenceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetUserPreferenceUseCase extends _i1.Mock
    implements _i5.SetUserPreferenceUseCase {
  MockSetUserPreferenceUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserPreferencesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserPreferencesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserPreferencesRepository);

  @override
  _i4.Future<void> execute(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [RegisterManagerUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterManagerUseCase extends _i1.Mock
    implements _i6.RegisterManagerUseCase {
  MockRegisterManagerUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> execute({
    required String? firstName,
    required String? lastName,
    required String? company,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #firstName: firstName,
            #lastName: lastName,
            #company: company,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [UnregisterManagerUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUnregisterManagerUseCase extends _i1.Mock
    implements _i7.UnregisterManagerUseCase {
  MockUnregisterManagerUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> execute({
    required String? firstName,
    required String? lastName,
    required String? company,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #firstName: firstName,
            #lastName: lastName,
            #company: company,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
